import asyncio
from typing import AsyncGenerator, TypeVar

# Define a type variable for the items generated by the asynchronous generator
T = TypeVar('T')

async def async_throttle(generator: AsyncGenerator[T, None], delay: float) -> AsyncGenerator[T, None]:
    """
    Throttle an asynchronous generator by adding a delay between items.

    Parameters
    ----------
    generator : AsyncGenerator[T, None]
        The asynchronous generator to throttle.
    delay : float
        The delay in seconds between each generated item.

    Yields
    ------
    T
        Items from the original generator, delayed by the specified amount.

    Examples
    --------
    >>> async def my_generator():
    >>>     for i in range(5):
    >>>         yield i
    >>> 
    >>> async for value in async_throttle(my_generator(), delay=1):
    >>>     print(value)
    0
    (1-second delay)
    1
    (1-second delay)
    2
    """
    # Iterate over the items in the generator
    async for item in generator:
        # Yield the current item
        yield item
        # Introduce a delay before yielding the next item
        await asyncio.sleep(delay)
