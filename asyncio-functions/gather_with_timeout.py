from typing import List, TypeVar
import asyncio

# Define a type variable for the items generated by the asynchronous generator
T = TypeVar('T')

async def gather_with_timeout(tasks: List[asyncio.Task], timeout: float) -> List[T]:
    """
    Gather asynchronous tasks and enforce a timeout.

    Parameters
    ----------
    tasks : List[asyncio.Task]
        The list of asynchronous tasks to execute.
    timeout : float
        The maximum time in seconds to wait for the tasks to complete.

    Returns
    -------
    List[T]
        The results of the tasks that completed before the timeout.

    Raises
    ------
    asyncio.TimeoutError
        If the tasks do not complete within the given timeout.

    Examples
    --------
    >>> async def long_task(i: int) -> int:
    >>>     await asyncio.sleep(i)
    >>>     return i
    >>> tasks = [long_task(1), long_task(2), long_task(3)]
    >>> asyncio.run(gather_with_timeout(tasks, timeout=2))
    [1, 2]
    """
    try:
        return await asyncio.wait_for(asyncio.gather(*tasks), timeout=timeout)
    except asyncio.TimeoutError:
        return await asyncio.gather(*[t for t in tasks if not t.cancelled()])
